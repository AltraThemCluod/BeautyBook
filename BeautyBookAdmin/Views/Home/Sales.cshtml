@using BeautyBook.Common;
@using BeautyBookAdmin.Pages;
@using System.Web.Optimization;
@using BeautyBookAdmin.Infrastructure;

@Html.AntiForgeryToken()

@{
    ViewBag.Title = "Sales";
}

<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />

<style>
    .checkbox2 {
        width: 25px;
        height: 25px;
    }

    thead {
        background: #0069D9;
        color: white;
    }

    .row {
        margin: 0 !important;
    }

    .activ {
        background: linear-gradient(to right, #0069D9, #0069D9);
        color: white;
    }

    .has-error .checkbox, .has-error .checkbox-inline, .has-error .control-label, .has-error .form-control-feedback, .has-error .help-block, .has-error .radio, .has-error .radio-inline, .has-error.checkbox label, .has-error.checkbox-inline label, .has-error.radio label, .has-error.radio-inline label {
        color: #e73d4a
    }

    .has-error .form-control {
        border-color: #e73d4a;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075)
    }

        .has-error .form-control:focus {
            border-color: #d71b29;
            -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f;
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #f2989f
        }

    .has-error .input-group-addon {
        color: #e73d4a;
        border-color: #e73d4a;
        background-color: #fbe1e3
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        z-index: 99;
        top: 40px;
        left: 0;
        right: 0;
        box-shadow: 0 39px 70px 0 rgba(0, 0, 0, 0.1);
        background-color: #ffffff;
    }

        .autocomplete-items > div {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #ccc;
        }

            .autocomplete-items > div:hover {
                background: #fbfbfb;
            }

    .addDelete {
        color: black !important;
        background: #e9e9e9 !important;
    }

    .hideDelete {
        display: none !important;
    }

    .text-c-dark {
        color: #000;
    }

    .device-active .active .card {
        background: #157aec;
        cursor: pointer;
    }

    .device-active .active .text-c-dark {
        color: #fff !important;
    }

        .device-active .active .text-c-dark .icon {
            background-color: #0069D9;
            border: none;
        }

    .icon-box {
        background: #eff1f4;
    }

        .icon-box:hover {
            background: #0e67cc !important;
        }
    .badge-info{
        cursor:pointer;
    }
</style>

<div class="modal fadeIn" id="OrderFillter" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">

            <div class="modal-header">
                <h6 class="title" id="defaultModalLabel">Salon Sales Filters</h6>
            </div>
            <div class="modal-body">
                <div class="row clearfix">
                    <div class="col-sm-12">
                        <label>Date</label>
                        <div class="form-group">
                            <input type="text" class="Ordersingledatepicker form-control" name="OrderDate" id="OrderDate" placeholder="">
                        </div>
                    </div>
                    @*<div class="col-sm-12">
                        <label>Time</label>
                        <div class="form-group">
                            <input type="time" class="form-control" name="name" value="" />
                        </div>
                    </div>*@
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnSearch" type="button" class="btn btn-primary saveBtn" onclick="SearchReset(false);">Search</button>
                <button type="button" data-dismiss="modal" class="btn btn-secondary closeBtn">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="block-header">
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <h2 id="headingtext"><a href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth"><i class="fa fa-arrow-left"></i></a>Sales</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="/"><i class="icon-home"></i></a>
                </li>
                <li class="breadcrumb-item active" id="breadcrum">Manage Salon Sales</li>
            </ul>
        </div>
    </div>
</div>

<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body">
                <div class="portlet-body table-responsive" id="SalonSalesDatatableDiv">
                    <table class="table table-striped table-bordered table-hover" id="SalonSalesDatatable"></table>
                </div>
            </div>
        </div>
    </div>
</div>

@section dashboardscripts{
    <script src="~/Scripts/jquery-ui.min.js"></script>
    <script src="~/Scripts/datatable.js"></script>
    <script src="~/Scripts/datatables.min.js"></script>
    <script src="~/Scripts/datatables.bootstrap.js"></script>
}

@section Scripts {
    <script>
        function modalshow() {
            $('#UsersFilterPopup').modal('show');
        }
        function viewBrand() {
            $('#viewBarandModal').modal('show');
        }

        $(document).ready(function () {
            SalonSalesDataFunction.init();
        })

        //Salon Branch details show
        var SalonSalesDataFunction = function () {
            let initTable1 = function () {
                let table = $('#SalonSalesDatatable');

                let oTable = table.dataTable({
                    "stateSave": true,
                    "autoWidth": false,
                    "paging": true,
                    // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                    "language": {
                        "aria": {
                            "sortAscending": ": activate to sort column ascending",
                            "sortDescending": ": activate to sort column descending"
                        },
                        "emptyTable": "No data available in table",
                        "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "infoEmpty": "No entries found",
                        "infoFiltered": "(filtered1 from _MAX_ total entries)",
                        "lengthMenu": "_MENU_ entries",
                        "search": "Search:",
                        "zeroRecords": "No matching records found"
                    },
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        async: true,
                        url: '@Url.Action(Actions.SalonSalesDataGet, Controllers.Home)',
                        type: "post",
                        data: BuildSearchCriteria(),
                    },
                    "columns": [
                        {
                            "title": "Order Id", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<b>${row["Id"]}</b>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Order No", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<b>${row["OrderNo"]}</b>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Invoice No", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<b>${row["InvoiceNo"]}</b>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Order Date", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<p class="mb-0">${row["OrderDate"] == "" || row["OrderDate"] == null ? '-' : row["OrderDate"]}</p>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Total Amount", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<b>SAR ${row["ProductTotal"] == "" || row["ProductTotal"] == null ? '-' : row["ProductTotal"]}</b>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Payment", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["Payment"] == 22) {
                                    htmlData += `${row["Payment"] == 22 ? `<div class="badge badge-info">${row["PaymentTypeName"]}</div>` : ''}`;
                                }
                                else {
                                    htmlData += `${row["Payment"] == 23 ? `<div class="badge badge-info">${row["PaymentTypeName"]}</div>` : ''}`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Order Status", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["LookUpStatusId"] == 16) {
                                    htmlData += `${row["LookUpStatusId"] == 16 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                else if (row["LookUpStatusId"] == 17) {
                                    htmlData += `${row["LookUpStatusId"] == 17 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                else if (row["LookUpStatusId"] == 18) {
                                    htmlData += `${row["LookUpStatusId"] == 18 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                else if (row["LookUpStatusId"] == 19) {
                                    htmlData += `${row["LookUpStatusId"] == 19 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                else if (row["LookUpStatusId"] == 20) {
                                    htmlData += `${row["LookUpStatusId"] == 20 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                else if (row["LookUpStatusId"] == 21) {
                                    htmlData += `${row["LookUpStatusId"] == 21 ? `<div class="badge badge-info">${row["LookUpStatusName"]}</div>` : '-'}`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Last Updated", "data": "",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["UpdatedDate"] == "" || row["UpdatedDate"] == null ? '-' : row["UpdatedDateStr"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },

                    ],
                // setup buttons extentension: http://datatables.net/extensions/buttons/
                    "buttons": [
                        {
                            text: 'Filters',
                            className: 'them-btn',
                            action: function (e, dt, node, config) {
                                OrderDataFillter();
                            }
                        },
                        {
                            text: 'Reset',
                            className: 'them-reset-btn',
                            action: function () {
                                SearchReset(true)
                            }
                        }
                        //{ extend: 'excel', className: 'them-btn' }
                    ],

                    // setup responsive extension: http://datatables.net/extensions/responsive/
                    responsive: true,

                    "lengthMenu": [
                        [5, 10, 15, 20, 1000],
                        [5, 10, 15, 20, 1000] // change per page values here
                    ],
                    // set the initial value

                    "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable
                });
            }

            return {
                //main function to initiate the module
                init: function () {
                    if ($.fn.DataTable.isDataTable("#SalonSalesDatatable")) {
                        $('#SalonSalesDatatable').dataTable().fnDestroy();
                        $('#SalonSalesDatatableDiv').html('<table class="table table-striped table-bordered table-hover" width="100%" id="SalonSalesDatatable"></table>');
                    }
                    initTable1();
                }
            };
        }();

        //Data fillter function
        function BuildSearchCriteria() {
            try {
                var param = {};
                param["SalonId"] = @ViewBag.SalonIdInt;
                param["DateOfOrder"] = $('#OrderDate').val();
                return addRequestVerificationToken(param);
            } catch (e) { }
        }

        function addRequestVerificationToken(data) {
            data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
            return data;
        }

        function OrderDataFillter() {
            $('#OrderFillter').modal('show');
        }
        //Fillter date reset function
        const SearchReset = (isReset = false) => {
            if (isReset == true) {
                $("#OrderDate").val(null);
            }
            SalonSalesDataFunction.init();
            $("#OrderFillter").modal("hide");
        }

    </script>
}
