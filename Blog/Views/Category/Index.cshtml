@using BeautyBook.Entities.Contract
@using BeautyBook.Entities.V1
@model BlogCategory
@{
    ViewBag.Title = "Manage Category";
}
@Html.AntiForgeryToken()
<div class="page-content">
    <div class="container-fluid">

        <!-- start page title -->
        <div class="row">
            <div class="col-12">
                <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                    <h4 class="mb-sm-0 font-size-18">Manage Category</h4>
                    <div class="page-title-right">
                        <ol class="breadcrumb m-0">
                            <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Dashboard</a></li>
                            <li class="breadcrumb-item active">Manage Category</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>

        <div class="row clearfix">
            <div class="col-12">
                <div class="card">
                    <div class="card-header p-2 d-flex align-items-center justify-content-between">
                        <div>
                            <h4 class="card-title">Manage Category</h4>
                            <p class="card-title-desc">
                                From this place you can manage categories
                            </p>
                        </div>
                        <button class="btn btn-primary waves-effect waves-light button w-md" onclick="addNewcategory();" type="button">Add New Category</button>
                    </div>
                    <div class="card-header p-2" id="add_new_category" style="display:none;">
                        <h4 class="card-title">Category Details</h4>
                        <p class="card-title-desc mb-3">
                            New create and update category
                        </p>
                        @using (Html.BeginForm("SaveBlogCategory", "Category", FormMethod.Post, new { @class = "row align-items-end", @id = "profile_form", @enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.Id)
                            <div class="col-lg-3">
                                <label class="form-label">Category Name</label>
                                @Html.TextBoxFor(m => m.CategoryName, new { @type = "text", @class = "form-control", @name = "CategoryName", @id = "CategoryName" })

                            </div>
                            <div class="col-lg-3">
                                <button class="btn btn-primary waves-effect waves-light button w-md" type="submit">Save</button>
                            </div>
                            @Html.ValidationMessageFor(m => m.CategoryName, "")
                        }
                    </div>
                    <div class="card-body">
                        <div class="portlet-body table-responsive" id="divCategoryTable">
                            <table class="table table-striped table-bordered table-hover" id="CategoryTable"></table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <!-- container-fluid -->
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            CategoryDataTable.init();

            if (@ViewBag.DecodeId > 0) {
                $("#add_new_category").show();
            } else {
                $("#add_new_category").hide();
            }

        });

        ////// add new category section show /////////////////////
        function addNewcategory() {
            $("#add_new_category").show();
        }

        var CategoryDataTable = function () {
            let initTable1 = function () {
                let table = $('#CategoryTable');

                let oTable = table.dataTable({
                    "stateSave": true,
                    "autoWidth": false,
                    "paging": true,
                    buttons: [],
                    // Internationalisation. For more info refer to http://datatables.net/manual/i18n
                    "language": {
                        "aria": {
                            "sortAscending": ": activate to sort column ascending",
                            "sortDescending": ": activate to sort column descending"
                        },
                        "emptyTable": "No data available in table",
                        "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "infoEmpty": "No entries found",
                        "infoFiltered": "(filtered1 from _MAX_ total entries)",
                        "lengthMenu": "_MENU_ entries",
                        "search": "Search:",
                        "zeroRecords": "No matching records found"
                    },
                    "pageLength": 10,
                    "processing": true,
                    "serverSide": true,
                    "ajax": {
                        async: true,
                        url: '@Url.Action("ManageCategoryData", "Category")',
                        type: "post",
                        data: BuildSearchCriteria(),
                    },
                    "columns": [
                        {
                            "title": "Id", "data": "Id",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["Id"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "0.3%"
                        },
                        {
                            "title": "Category Name", "data": "CategoryName",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData = `${row["CategoryName"] == "" || row["CategoryName"] == null ? '-' : row["CategoryName"]}`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Is Active ?", "data": "IsActive",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                if (row["IsActive"] == true) {
                                    //InactiveMessage
                                    htmlData = `<button onclick="InactiveMessage('${btoa(row["Id"])}');" class="badge bg-soft-success text-success">Active</button>`;
                                } else {
                                    htmlData = `<button onclick="ActiveMessage('${btoa(row["Id"])}');" class="badge bg-soft-danger text-danger">In-Active</button>`;
                                }
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                        {
                            "title": "Action", "data": "Id",
                            "render": function (data, type, row) {
                                let htmlData = "";
                                htmlData += `<a href="@Url.Action("Index","Category")?ri=${btoa(row["Id"])}" class="cur-pointer-icon"><i class="bx bx-edit-alt"></i></a>`;
                                htmlData += `&nbsp;&nbsp;`;
                                htmlData += `<label class="cur-pointer-icon" onclick="ConfirmCategorydelete('${btoa(row["Id"])}');"><i class="bx bx-trash-alt"></i></label>`;
                                return htmlData;
                            }
                            , "orderable": false, "width": "3%"
                        },
                    ],

                    // setup responsive extension: http://datatables.net/extensions/responsive/
                    responsive: true,

                    "lengthMenu": [
                        [5, 10, 15, 20, 1000],
                        [5, 10, 15, 20, 1000] // change per page values here
                    ],
                    // set the initial value

                    "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable
                });
            }

            return {
                //main function to initiate the module
                init: function () {
                    if ($.fn.DataTable.isDataTable("#CategoryTable")) {
                        $('#CategoryTable').dataTable().fnDestroy();
                        $('#divCategoryTable').html('<table class="table table-striped table-bordered table-hover" id="CategoryTable"></table>');
                    }
                    initTable1();
                }
            };
        }();

        //Data fillter function
        function BuildSearchCriteria() {
            try {
                var param = {};
                return addRequestVerificationToken(param);
            } catch (e) { }
        }


        function addRequestVerificationToken(data) {
            data.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();
            return data;
        }

        /////////Active and in-active category data ////////////////////////////

        //InactiveMessage confirmation function
        function InactiveMessage(Id) {
            if (confirm("Are you sure? you want to in-active this category")) {
                ActiveInActive(Id);
            }
        }

        //ActiveMessage confirmation function
        function ActiveMessage(Id) {
            if (confirm("Are you sure? you want to active this category")) {
                ActiveInActive(Id);
            }
        }

        //status ActiveInActive change function
        function ActiveInActive(rui) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("ActiveInActiveCategory", "Category")',
                data: { Id: rui},
                dataType: 'json',
                success: function (response) {
                    CategoryDataTable.init();
                    if (response.Code == 200) {
                        $.notify(response.Message, "success");
                    } else {
                        $.notify(response.Message, "error");
                    }
                },
                error: function (error) {

                }
            });
        }

        ///////Category data delete //////////////////////////////////
        //Delete confirmation function
        function ConfirmCategorydelete(Id) {
            if (confirm("Are you sure? you want to delete this category")) {
                CategoryDelete(Id);
            }
        }

        //Category data delete function
        function CategoryDelete(Id) {
            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeleteCategory", "Category")",
                async: false,
                data: ({ Id: Id }),
                dataType: 'json',
                success: function (response) {
                    CategoryDataTable.init();
                    if (response.Code == 200) {
                        $.notify(response.Message, "success");
                    } else {
                        $.notify(response.Message, "error");
                    }
                },
                error: function (response) {
                    $.notify("Opps! An error occured ! Please try again.", "error");
                }
            });
        }


    </script>
}